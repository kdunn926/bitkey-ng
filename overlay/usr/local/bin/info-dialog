#!/usr/bin/env python3
# Copyright (c) 2014 Alon Swartz <alon@turnkeylinux.org>

"""
Displays contents of 'infofile' in a dialog until file no longer exists

Arguments:
    infofile        path to infofile

Options:
    --title=        dialog title (default: info)
    --freq=         frequency in ms to read inputfile (default: 100)

"""

import os
import sys
import gtk
import getopt
import gobject

def fatal(e):
    print('Error: ' + str(e), file=sys.stderr)
    sys.exit(1)

def usage(e=None):
    if e:
        print('Error: ' + str(e), file=sys.stderr)

    cmd = os.path.basename(sys.argv[0])
    print('Syntax: {} [--opts] infofile'.format(cmd), file=sys.stderr)
    print(__doc__.strip(), file=sys.stderr)

    sys.exit(1)

class InfoDialog(object):
    def __init__(self, infofile, freq=100, title='info'):
        self.dialog = gtk.MessageDialog(
            None,
            gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
            gtk.MESSAGE_QUESTION)

        self.dialog.set_title(title)
        self.dialog.get_image().set_visible(False)

        self.label = gtk.Label()
        self.label.set_size_request(450, 50)
        self.label.set_alignment(0.5, 0.5)
        self.label.show()
        self.dialog.vbox.pack_start(self.label, False, True, 0)

        self.infofile = infofile
        self.freq = freq
        self._update()

    def _update(self):
        try:
            new = file(self.infofile, 'r').read()
            cur = self.label.get_text()
            if not cur == new:
                self.label.set_text(new)
        except:
            self.dialog.response(gtk.RESPONSE_CANCEL)
            return False

        return True

    def run(self):
        self.dialog.show()
        gobject.timeout_add(self.freq, self._update)
        self.dialog.run()

def main():
    try:
        l_opts = ['help', 'title=', 'freq=']
        opts, args = getopt.gnu_getopt(sys.argv[1:], 'h', l_opts)
    except getopt.GetoptError as e:
        usage(e)

    title = 'info'
    freq = 100
    for opt, val in opts:
        if opt in ('-h', '--help'):
            usage()

        elif opt == '--title':
            title = val

        elif opt == '--freq':
            freq = int(val)

    if not len(args) == 1:
        fatal('incorrect amount of arguments')

    infofile = args[0]
    if not os.path.exists(infofile):
        fatal('infofile does not exist: %s' % infofile)

    i = InfoDialog(infofile, freq, title)
    i.run()


if __name__ == '__main__':
    main()



